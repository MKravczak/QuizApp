# =============================================================================
# QUIZAPP SECURITY CONFIGURATION TEMPLATE
# =============================================================================
# This file contains all security-related configuration properties for QuizApp
# Copy relevant sections to your application.properties or environment variables

# =============================================================================
# JWT AUTHENTICATION CONFIGURATION
# =============================================================================

# JWT Secret Key - MUST be the same across all microservices
# PRODUCTION: Use a cryptographically secure random key and store in secrets management
app.jwt.secret=MIkolajKrawczakJWTSecretKey2024SuperBezpiecznyKluczDoTokenowMinimum256BitowKryptograficzny

# JWT Token Expiration (in milliseconds)
# Default: 24 hours (86400000 ms)
app.jwt.expiration=86400000

# JWT Refresh Token Expiration (in milliseconds)  
# Default: 7 days (604800000 ms)
app.jwt.refresh-expiration=604800000

# =============================================================================
# ANTI-POSTMAN FILTER CONFIGURATION
# =============================================================================

# Enable/Disable AntiPostman protection
# DEVELOPMENT: false (for easier testing)
# PRODUCTION: true (for enhanced security)
app.security.anti-postman.enabled=false

# Allowed origins for CORS and AntiPostman filter
# DEVELOPMENT: http://localhost:3000,http://127.0.0.1:3000
# PRODUCTION: https://yourdomain.com
app.security.allowed-origins=http://localhost:3000,http://127.0.0.1:3000

# Client secret for signature verification
# PRODUCTION: Use a different secret than the default one
app.security.client-secret=MIkolajKrawczakClientSecret2024AntiPostmanProtectionAdvancedSecurity

# =============================================================================
# RATE LIMITING CONFIGURATION
# =============================================================================

# Enable/Disable rate limiting
app.security.rate-limit.enabled=true

# Maximum requests per time window
# DEVELOPMENT: 50-100 (for easier testing)
# PRODUCTION: 20-50 (more restrictive)
app.security.rate-limit.max-requests=50

# Time window in milliseconds
# Default: 60 seconds (60000 ms)
app.security.rate-limit.window-size=60000

# =============================================================================
# SPRING SECURITY CONFIGURATION
# =============================================================================

# Enable Spring Security debug logging
# DEVELOPMENT: DEBUG (for troubleshooting)
# PRODUCTION: WARN or ERROR
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.validation=TRACE
logging.level.org.hibernate.validator=TRACE

# Custom security filter logging
logging.level.com.example.userservice.security.AntiPostmanFilter=INFO
logging.level.com.example.userservice.security.RateLimitingFilter=INFO
logging.level.com.example.userservice.security.JwtAuthenticationFilter=DEBUG

# =============================================================================
# DATABASE SECURITY CONFIGURATION
# =============================================================================

# Database connection (use environment variables in production)
spring.datasource.url=jdbc:postgresql://postgres:5432/quizapp
spring.datasource.username=postgres
spring.datasource.password=postgres

# JPA Security
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false

# =============================================================================
# SERVER SECURITY CONFIGURATION
# =============================================================================

# Server configuration
server.port=8080
server.servlet.context-path=/

# Session management (stateless for JWT)
spring.session.store-type=none

# Security headers
server.servlet.session.cookie.secure=false
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=lax

# =============================================================================
# PRODUCTION ENVIRONMENT VARIABLES
# =============================================================================
# Use these environment variables in production instead of properties

# JWT_SECRET=your-super-secure-random-key-here
# JWT_EXPIRATION=86400000
# JWT_REFRESH_EXPIRATION=604800000
# ANTI_POSTMAN_ENABLED=true
# ALLOWED_ORIGINS=https://yourdomain.com
# CLIENT_SECRET=your-production-client-secret
# RATE_LIMIT_ENABLED=true
# RATE_LIMIT_MAX_REQUESTS=20
# RATE_LIMIT_WINDOW_SIZE=60000
# DATABASE_URL=jdbc:postgresql://your-db-host:5432/quizapp
# DATABASE_USERNAME=your-db-user
# DATABASE_PASSWORD=your-secure-db-password

# =============================================================================
# SECURITY HEADERS CONFIGURATION
# =============================================================================

# Additional security headers (can be configured in Spring Security)
# X-Content-Type-Options: nosniff
# X-Frame-Options: DENY
# X-XSS-Protection: 1; mode=block
# Strict-Transport-Security: max-age=31536000; includeSubDomains
# Content-Security-Policy: default-src 'self'
# Referrer-Policy: strict-origin-when-cross-origin

# =============================================================================
# MONITORING AND AUDITING CONFIGURATION
# =============================================================================

# Actuator endpoints for monitoring (secure in production)
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized
management.endpoint.health.roles=ADMIN

# Enable security events auditing
spring.security.events.enabled=true

# =============================================================================
# TROUBLESHOOTING CONFIGURATION
# =============================================================================

# Enable detailed error responses (disable in production)
server.error.include-stacktrace=never
server.error.include-message=never

# CORS debugging
logging.level.org.springframework.web.cors=DEBUG

# Request/Response logging
logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG 